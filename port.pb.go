// Code generated by protoc-gen-go. DO NOT EDIT.
// source: port.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PortBatchReq struct {
	Ports                []*Port  `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortBatchReq) Reset()         { *m = PortBatchReq{} }
func (m *PortBatchReq) String() string { return proto.CompactTextString(m) }
func (*PortBatchReq) ProtoMessage()    {}
func (*PortBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_729c3d36e9010a8e, []int{0}
}

func (m *PortBatchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortBatchReq.Unmarshal(m, b)
}
func (m *PortBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortBatchReq.Marshal(b, m, deterministic)
}
func (m *PortBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortBatchReq.Merge(m, src)
}
func (m *PortBatchReq) XXX_Size() int {
	return xxx_messageInfo_PortBatchReq.Size(m)
}
func (m *PortBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PortBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_PortBatchReq proto.InternalMessageInfo

func (m *PortBatchReq) GetPorts() []*Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

type PortBatchRsp struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortBatchRsp) Reset()         { *m = PortBatchRsp{} }
func (m *PortBatchRsp) String() string { return proto.CompactTextString(m) }
func (*PortBatchRsp) ProtoMessage()    {}
func (*PortBatchRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_729c3d36e9010a8e, []int{1}
}

func (m *PortBatchRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortBatchRsp.Unmarshal(m, b)
}
func (m *PortBatchRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortBatchRsp.Marshal(b, m, deterministic)
}
func (m *PortBatchRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortBatchRsp.Merge(m, src)
}
func (m *PortBatchRsp) XXX_Size() int {
	return xxx_messageInfo_PortBatchRsp.Size(m)
}
func (m *PortBatchRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PortBatchRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PortBatchRsp proto.InternalMessageInfo

func (m *PortBatchRsp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Port struct {
	Name                 string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	City                 string    `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Country              string    `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Alias                []string  `protobuf:"bytes,4,rep,name=alias,proto3" json:"alias,omitempty"`
	Regions              []string  `protobuf:"bytes,5,rep,name=regions,proto3" json:"regions,omitempty"`
	Coordinates          []float64 `protobuf:"fixed64,6,rep,packed,name=coordinates,proto3" json:"coordinates,omitempty"`
	Province             string    `protobuf:"bytes,7,opt,name=province,proto3" json:"province,omitempty"`
	Timezone             string    `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Unlocs               []string  `protobuf:"bytes,9,rep,name=unlocs,proto3" json:"unlocs,omitempty"`
	Code                 string    `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Port) Reset()         { *m = Port{} }
func (m *Port) String() string { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()    {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_729c3d36e9010a8e, []int{2}
}

func (m *Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Port.Unmarshal(m, b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Port.Marshal(b, m, deterministic)
}
func (m *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(m, src)
}
func (m *Port) XXX_Size() int {
	return xxx_messageInfo_Port.Size(m)
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Port) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Port) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Port) GetAlias() []string {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *Port) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *Port) GetCoordinates() []float64 {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *Port) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *Port) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Port) GetUnlocs() []string {
	if m != nil {
		return m.Unlocs
	}
	return nil
}

func (m *Port) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func init() {
	proto.RegisterType((*PortBatchReq)(nil), "proto.PortBatchReq")
	proto.RegisterType((*PortBatchRsp)(nil), "proto.PortBatchRsp")
	proto.RegisterType((*Port)(nil), "proto.Port")
}

func init() {
	proto.RegisterFile("port.proto", fileDescriptor_729c3d36e9010a8e)
}

var fileDescriptor_729c3d36e9010a8e = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x8d, 0x69, 0xda, 0x64, 0xe2, 0x41, 0x56, 0x91, 0xa5, 0xa7, 0x98, 0x53, 0x4e, 0x05,
	0xeb, 0xdd, 0x83, 0x77, 0xa1, 0xac, 0xbf, 0x20, 0x6e, 0x06, 0x5d, 0x68, 0x77, 0xe2, 0xee, 0xa6,
	0x50, 0x7f, 0xbc, 0xc8, 0x6c, 0x9a, 0x12, 0xf0, 0x94, 0x79, 0xdf, 0x7b, 0x93, 0x61, 0x66, 0x01,
	0x7a, 0x72, 0x61, 0xd3, 0x3b, 0x0a, 0x24, 0xb2, 0xf8, 0xa9, 0x9f, 0xe0, 0x66, 0x47, 0x2e, 0xbc,
	0xb6, 0x41, 0x7f, 0x29, 0xfc, 0x16, 0x8f, 0x90, 0x71, 0xc8, 0xcb, 0xa4, 0x4a, 0x9b, 0x72, 0x5b,
	0x8e, 0xe9, 0x0d, 0x67, 0xd4, 0xe8, 0xd4, 0xcd, 0xbc, 0xc5, 0xf7, 0x42, 0xc2, 0xca, 0x0f, 0x5a,
	0xa3, 0xe7, 0xa6, 0xa4, 0xc9, 0xd5, 0x24, 0xeb, 0xdf, 0x04, 0x16, 0x1c, 0x15, 0x02, 0x16, 0xb6,
	0x3d, 0x60, 0xf4, 0x0b, 0x15, 0x6b, 0x66, 0xda, 0x84, 0x93, 0xbc, 0x1e, 0x19, 0xd7, 0xfc, 0x2b,
	0x4d, 0x83, 0x0d, 0xee, 0x24, 0xd3, 0x88, 0x27, 0x29, 0xee, 0x21, 0x6b, 0xf7, 0xa6, 0xf5, 0x72,
	0x51, 0xa5, 0x4d, 0xa1, 0x46, 0xc1, 0x79, 0x87, 0x9f, 0x86, 0xac, 0x97, 0x59, 0xe4, 0x93, 0x14,
	0x15, 0x94, 0x9a, 0xc8, 0x75, 0xc6, 0xb6, 0x01, 0xbd, 0x5c, 0x56, 0x69, 0x93, 0xa8, 0x39, 0x12,
	0x6b, 0xc8, 0x7b, 0x47, 0x47, 0x63, 0x35, 0xca, 0x55, 0x1c, 0x76, 0xd1, 0xec, 0x05, 0x73, 0xc0,
	0x1f, 0xb2, 0x28, 0xf3, 0xd1, 0x9b, 0xb4, 0x78, 0x80, 0xe5, 0x60, 0xf7, 0xa4, 0xbd, 0x2c, 0xe2,
	0xc8, 0xb3, 0x8a, 0xfb, 0x50, 0x87, 0x12, 0xce, 0xfb, 0x50, 0x87, 0xdb, 0x37, 0x28, 0x79, 0xff,
	0x77, 0x74, 0x47, 0xa3, 0x51, 0xbc, 0xc0, 0xed, 0xce, 0x11, 0x9f, 0xe6, 0x72, 0x40, 0x71, 0x37,
	0xbb, 0xf0, 0xf4, 0x0a, 0xeb, 0xff, 0xd0, 0xf7, 0xf5, 0xd5, 0xc7, 0x32, 0xd2, 0xe7, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x29, 0x51, 0xe3, 0x75, 0xc8, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PortServiceClient is the client API for PortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortServiceClient interface {
	ProcessPortBatch(ctx context.Context, in *PortBatchReq, opts ...grpc.CallOption) (*PortBatchRsp, error)
}

type portServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortServiceClient(cc grpc.ClientConnInterface) PortServiceClient {
	return &portServiceClient{cc}
}

func (c *portServiceClient) ProcessPortBatch(ctx context.Context, in *PortBatchReq, opts ...grpc.CallOption) (*PortBatchRsp, error) {
	out := new(PortBatchRsp)
	err := c.cc.Invoke(ctx, "/proto.PortService/ProcessPortBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServiceServer is the server API for PortService service.
type PortServiceServer interface {
	ProcessPortBatch(context.Context, *PortBatchReq) (*PortBatchRsp, error)
}

// UnimplementedPortServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPortServiceServer struct {
}

func (*UnimplementedPortServiceServer) ProcessPortBatch(ctx context.Context, req *PortBatchReq) (*PortBatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPortBatch not implemented")
}

func RegisterPortServiceServer(s *grpc.Server, srv PortServiceServer) {
	s.RegisterService(&_PortService_serviceDesc, srv)
}

func _PortService_ProcessPortBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).ProcessPortBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PortService/ProcessPortBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).ProcessPortBatch(ctx, req.(*PortBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PortService",
	HandlerType: (*PortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessPortBatch",
			Handler:    _PortService_ProcessPortBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "port.proto",
}
